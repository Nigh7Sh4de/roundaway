{
  "name": "Roundaway",
  "tagline": "Roundaway API",
  "body": "## Backend Objects\r\n*These are object definitions used in the backend models*\r\n\r\n#### Location `{}`\r\n    address: String,\r\n    coordinates: [Number]\r\n\r\n#### Price `{}`\r\n    perHour: Number\r\n\r\n#### Range (Type) `{}`\r\n    start: Type,\r\n    end: Type\r\n\r\n#### Ranger `[]`\r\n    [Range(Date)]\r\n    next: Range(Date)\r\n\r\n#### BookingStatus `enum`\r\n    unpaid,\r\n    paid,\r\n    archived\r\n\r\n#### Profile `{}`\r\n    name: String\r\n\r\n## Models\r\n*All models have a `createdAt` and `updatedAt` field*\r\n\r\n#### User\r\nThe <b>User</b> object holds basic data about the <b>User</b> including <code>profile</code> and authentication information. All other models reference their owner through a <code>user</code> property.\r\n\r\n    profile: Profile,\r\n    authid: {\r\n        facebook: String,\r\n        google: String\r\n    },\r\n    admin: Boolean,\r\n    attendant: Boolean\r\n\r\n#### Lot\r\nA <b>Lot</b> is simply a collection of <b>Spot</b>s that share a common <code>profile</code>. The <b>Lot</b>'s **price**, **availability**, and **location** are used as defaults for new <b>Spot</b>s.\r\n\r\n    User: User\r\n    attendants: [User]\r\n    location: Location,\r\n    price: Price,\r\n    available: Ranger,\r\n    name: String,\r\n    description: String\r\n\r\n#### Spot\r\nA <b>Spot</b> can be booked by users for a set period of time. Once a <b>Spot</b> is created you cannot modify the **location**. Modifying the **price** of a <b>Spot</b> will not modify existing `Booking`s. Associating a <b>Spot</b> with a <b>Lot</b> will overwrite the <b>Spot</b>'s **location** with the one in the <b>Lot</b>. \r\n    \r\n    user: User,\r\n    attendants: [User],\r\n    lot: Lot,\r\n    name: String,\r\n    description: String\r\n    reserved: Boolean,\r\n    price: Price,\r\n    location: Location,\r\n    available: Ranger,\r\n    booked: Ranger,\r\n\r\n\r\n#### Booking\r\nA `Booking` is an immutable object that is used to track bookings on a <b>Spot</b>. Once a `Booking` is created you cannot modify the **spot**, **price**, **start**, nor **end** properties. The status defaults to `unpaid` and will change to `paid` once payment has been succesfuly processed. A `Booking`s price is calculated using it's duration (calculated using it's **start** and **end** properties) multiplied byt he price of the <b>Spot</b> that it is associated with.\r\n\r\n    user: User,\r\n    car: Car,\r\n    spot: Spot,\r\n    status: BookingStatus,\r\n    price: Price,\r\n    start: Date,\r\n    end: Date,\r\n\r\n\r\n## Authentication\r\n\r\nCertain API routes requre a JWT and/or the associated user to have certain privelages. The specific requirements for each route are listed below.\r\nIn order to make API calls that are auth protected use the following flow:\r\n\r\n1. Authenticate with a 3rd party authentication server of your choice. Currently supported options:\r\n  - Facebook\r\n  - Google \r\n2. Hit `POST /auth/:strat` with an **access_token** as supplied by the social network you are authenticating with\r\n3. You will receieve a **JWT** in the response if authentication was successful after one of the following operations has completed:\r\n  - A user was found in db\r\n  - A new user was created\r\n4. Set an `Authorizaton` header with the `JWT` scheme (as in: `Authorization: JWT JWT_STRING...`) in all subsequent requests\r\n5. If a certain user requires elevated privelages (such as *admin*) the db admin must set the appropriate flag in the user collection manually (*note*: changing privelages does not require generating a new JWT, so changing privelages can be done on the fly)\r\n\r\n\r\n## API\r\n\r\n*All api calls are on the `/api` route*\r\n\r\n### Authorization\r\nEach route has a security policy with one of the following properties:\r\n<table>\r\n  <tr>\r\n    <td><i>public</i></td>\r\n    <td>Anyone can access this route</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>authorized</i></td>\r\n    <td>A valid JWT must be provided</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>attendant</i></td>\r\n    <td>You must be an attendant that is specified on the resource</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>owner</i></td>\r\n    <td>You must be an owner of the resource (user id is set in the resource's <code>user</code> property)</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>admin</i></td>\r\n    <td>You must be an admin</td>\r\n  </tr>\r\n</table>\r\n\r\n### Responses\r\n\r\n<table>\r\n  <tr>\r\n    <td>status</td>\r\n    <td>One word status description: <code>ERROR</code> or <code>SUCCESS</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>message</td>\r\n    <td>Optional for <code>ERROR</code> responses. Contains some response message describe the back-end operation that took place</td>\r\n  </tr>\r\n  <tr>\r\n    <td>errors</td>\r\n    <td>Array of strings containing the different errors that occured. Sometimes present on <code>SUCCESS</code> responses as well when performing an action on a collection and some documents succeeded while others did not</td>\r\n  </tr>\r\n  <tr>\r\n    <td>data</td>\r\n    <td>Any data being returned by the server as per the request</td>\r\n  </tr>\r\n</table>\r\n\r\n### Requests\r\n\r\n#### Util\r\n\r\n##### POST `/api/util/location/geocode`\r\n<table>\r\n  <tr>\r\n    <td><i>Security</i></td>\r\n    <td>public</td>\r\n  </tr>\r\n  <tr>\r\n    <td>address</td>\r\n    <td>The address you wish to geocode</td>\r\n  </tr>\r\n</table>\r\nRetrieve the proper formatted address for a location (as it would be saved in the database)\r\n\r\n#### Authentication\r\n\r\n##### GET `/auth/:strat?access_token`\r\n<table>\r\n  <tr>\r\n    <td><i>Security</i></td>\r\n    <td>public</td>\r\n  </tr>\r\n  <tr>\r\n    <td>strat</td>\r\n    <td>The social network with which to authenticate. Can be one of: ['facebook', 'google'].</td>\r\n  </tr>\r\n  <tr>\r\n    <td>access_token</td>\r\n    <td>The access token as provided by the social network</td>\r\n</table>\r\nOnce you have authenticated the user elsewhere (client-side or on another server), send the `access_token` here in order to authenticate with this server. Sends back a JWT for subsequent API requests.\r\n\r\n#### User\r\n\r\n##### GET `/api/users`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>admin</td>\r\n  </tr>\r\n</table>\r\nReturns the entire <b>User</b>s collection.\r\n\r\n##### GET `/api/users/profile`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>authorized</td>\r\n  </tr>\r\n</table>\r\nReturns the current session <b>User</b>.\r\n\r\n##### GET `/api/users/:userid/lots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>admin</td>\r\n  </tr>\r\n</table>\r\nReturns the given <b>User</b>'s lots.\r\n\r\n##### GET `/api/users/:userid/spots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>admin</td>\r\n  </tr>\r\n</table>\r\nReturns the given <b>User</b>'s spots.\r\n\r\n##### GET `/api/users/:userid/bookings`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>admin</td>\r\n  </tr>\r\n</table>\r\nReturns the given <b>User</b>'s bookings.\r\n\r\n##### GET `/api/users/:userid/profile`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>admin</td>\r\n  </tr>\r\n</table>\r\nReturns the given <b>User</b>'s profile.\r\n\r\n##### PATCH `/api/users/:userid/profile`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>admin</td>\r\n  </tr>\r\n  <tr>\r\n    <td colspan=\"2\">Profile properties</td>\r\n  </tr>\r\n  <tr>\r\n    <td>name</td>\r\n    <td>Name of the <b>User</b></td>\r\n  </tr>\r\n</table>\r\nUpdates the specified fields of the <b>User</b>'s profile.\r\n\r\n#### Booking\r\n\r\n##### GET `/api/bookings`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the owned <b>Booking</b> or entire collection if admin.\r\n\r\n##### GET `/api/bookings/:id`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the <b>Booking</b> with the specified id.\r\n\r\n##### GET `/api/bookings/:id/spot`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the spot that is associated with this <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/car`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the car that is associated with this <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/start`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the start of the specified <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/duration`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the duration of the specified <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/end`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the end of the specified <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/time`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the time <code>{start: Date, end: Date}</code> of the specified <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/price`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the price of the booking of the specified <b>Booking</b>.\r\n\r\n##### GET `/api/bookings/:id/status`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturns the status of the booking of the specified <b>Booking</b>.\r\n\r\n##### PUT `/api/bookings/:id/pay`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>token</td>\r\n    <td>The card token to use as the source of payment</td>\r\n  </tr>\r\n</table>\r\nPay for a <b>Booking</b>.\r\n\r\n#### Lot\r\n\r\n##### GET `/api/lots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the owned <b>Lot</b>s or entire collection if admin.\r\n\r\n##### PUT `/api/lots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>authorized</td>\r\n  </tr>\r\n  <tr>\r\n    <td>count</td>\r\n    <td>Number of <b>Lot</b>s to create (defaults to 1)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>location</td>\r\n    <td>An object containing a <code>coordinates</code> property with the coordinates of the location of the <b>Lot</b><br /> \r\n    Can either be a number array of <code>[longitude, latitude]</code> or\r\n    an object containing <code>long</code> or <code>lon</code> and <code>lat</code> and properties</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>(optional)</i> price</td>\r\n    <td>A price object containing the price breakdown for the <b>Lot</b> (to be used as a default for the <b>Lot</b>'s spots)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>lot</td>\r\n    <td>An object containing the properties you want to intiate the <b>Lot</b>(s) with (if this is used the rest of the request body except <b>count</b> is ignored)</td>\r\n  </tr>\r\n</table>\r\nCreate a new <b>Lot</b>.\r\n\r\n##### GET `/api/lots/:id`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the <b>Lot</b> with the specified id.\r\n\r\n##### GET `/api/lots/:id/location`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the location of the <b>Lot</b> with the specified id.\r\n\r\n##### GET `/api/lots/:id/spots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the spots associated with the <b>Lot</b>.\r\n\r\n\r\n##### GET `/api/lots/:id/attendants`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturn the attendants associated with the <b>Lot</b>.\r\n\r\n##### PUT `/api/lots/:id/attendants`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>attendants</td>\r\n    <td>The id's of <b>User</b>'s to add as attendants</td>  \r\n  </tr>\r\n</table>\r\nReturn the attendants associated with the <b>Lot</b>.\r\n\r\n##### GET `/api/lots/:id/available`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the ranges during which new spots in this <b>Lot</b> would be available in an array where each pair of indices is a start and end time. \r\n\r\n##### PUT `/api/lots/:id/available`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>start</td>\r\n    <td>The start of the range to add</td>\r\n  </tr>\r\n  <tr>\r\n    <td>end</td>\r\n    <td>The end of the range to add</td>\r\n  </tr>\r\n  <tr>\r\n    <td>interval</td>\r\n    <td><i>(optional - required for recuring ranges)</i> The interval (in ms) at which to repeat this range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>count </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The number of times to repeat the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>finish </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The limit at which to stop repeating the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>schedules</td>\r\n    <td>An array of schedules each with <i>start</i>, <i>end</i>, and optionally <i>interval</i> and either <i>count</i> or <i>finish</i>. If using an array, the rest of the body of the request will be ignored.\r\n  </tr>\r\n</table>\r\nAdds availability based on the supplied information. Either <code>count</code> (of reptitions) or <code>finish</code> (final upper limit) must be set if using a recuring range.\r\n\r\n##### PUT `/api/lots/:id/available/remove`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>start</td>\r\n    <td>The start of the range to remove</td>\r\n  </tr>\r\n  <tr>\r\n    <td>end</td>\r\n    <td>The end of the range to remove</td>\r\n  </tr>\r\n  <tr>\r\n    <td>interval</td>\r\n    <td><i>(optional - required for recuring ranges)</i> The interval (in ms) at which to repeat this range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>count </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The number of times to repeat the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>finish </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The limit at which to stop repeating the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>schedules</td>\r\n    <td>An array of schedules each with <i>start</i>, <i>end</i>, and optionally <i>interval</i> and either <i>count</i> or <i>finish</i>. If using an array, the rest of the body of the request will be ignored.\r\n  </tr>\r\n</table>\r\nRemoves availability based on the supplied information. Either <code>count</code> (of reptitions) or <code>finish</code> (final upper limit) must be set if using a recuring range.\r\n\r\n##### GET `/api/lots/:id/price`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns an object which which contains details for each price type (such as per hour, etc).\r\n\r\n##### GET `/api/lots/:id/price`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n  <tr>\r\n    <td>...</td>\r\n    <td>The <code>Price</code> properties you wish to update and their new values</td>\r\n  </tr>\r\n</table>\r\nSet the price of new spots for the <b>Lot</b>. Does not modify existing spots.\r\n\r\n##### GET `/api/lots/:id/name`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the name of the <b>Lot</b>\r\n\r\n##### PUT `/api/lots/:id/name`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>name</td>\r\n    <td>the name to set for the <b>Lot</b></td>\r\n  </tr>\r\n</table>\r\nSet a name for the <b>Lot</b> that will be used by the owner to identify spots (instead of just by location)\r\n\r\n##### GET `/api/lots/:id/description`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the description of the <b>Lot</b>\r\n\r\n##### PUT `/api/lots/:id/description`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>description</td>\r\n    <td>the description to set for the <b>Lot</b></td>\r\n  </tr>\r\n</table>\r\nSet the description of the <b>Lot</b> that will be displayed to users looking to rent (can provide details regarding where to park, type of spot, etc). In retrospect this is probably useless on <b>Lot</b>s.\r\n\r\n#### Spot\r\n\r\n##### GET `/api/spots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the owned <b>Spot</b>s or entire collection if admin.\r\n\r\n##### PUT `/api/spots`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>authorized</td>\r\n  </tr>\r\n  <tr>\r\n    <td>location</td>\r\n    <td>An object containing an <code>address: String</code> property with the address of the <b>Spot</b>; this address will be geocoded again to retrieve a uniform formattedAddress and coordinates \r\n  </tr>\r\n  <tr>\r\n    <td>price</td>\r\n    <td>A price object containing the price breakdown for the <b>Spot</b> (to be used as a default for the <b>Spot</b>'s <b>Spot</b>s)</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>(optional)</i> lot</td>\r\n    <td>Either the id or the entire <b>Lot</b> object of the lot to associate with this <b>Spot</b> (<i><code>*</code></i> when this property is provided, price and location properties are attempted to be retrieved from the <b>Lot</b> object)</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>(optional)</i> <b>Spot</b></td>\r\n    <td>An object containing the properties you want to intiate the <b>Spot</b>(s) with (if this is used the rest of the request body except <b>count</b> is ignored)</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>(optional)</i> count</td>\r\n    <td>Number of <b>Spot</b>s to create (defaults to 1)</td>\r\n  </tr>\r\n</table>\r\nCreate a new <b>Spot</b>.\r\n\r\n##### GET `/api/spots/near?long=LONGITUDE&lat=LATITUDE&available=DATE&count=COUNT`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>public</td>\r\n  </tr>\r\n  <tr>\r\n    <td>long</td>\r\n    <td>Longitude of the target location</td>\r\n  </tr>\r\n  <tr>\r\n    <td>lat</td>\r\n    <td>Latitude of the target location</td>\r\n  </tr>\r\n    <td>available</td>\r\n    <td>A datetime during which this <b>Spot</b> should be available (if unassigned then current time is used)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>count</td>\r\n    <td>Number of <b>Spot</b>s to return</td>\r\n  </tr>\r\n</table>\r\nReturns the required number of <b>Spot</b>s based on the given filters\r\n\r\n##### GET `/api/spots/:id`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the <b>Spot</b> with the specified id.\r\n\r\n##### GET `/api/spots/:id/lot`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the <b>Lot</b> associated with the <b>Spot</b>\r\n\r\n##### PUT `/api/spots/:id/lot`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nAssociate a <b>Lot</b> with the <b>Spot</b>. This will not transfer over any of the Lot's properties such as <code>price</code>, <code>location</code>, etc.\r\n\r\n##### PUT `/api/spots/:id/lot/remove`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nDisassociate any lot from this <b>Spot</b>\r\n\r\n##### GET `/api/spots/:id/location`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the location of the <b>Spot</b> with the specified id.\r\n\r\n##### GET `/api/spots/:id/price`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns an object which which contains details for each price type (such as per hour, etc).\r\n\r\n##### PUT `/api/spots/:id/price`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>...</td>\r\n    <td>The <code>Price</code> properties you wish to update and their new values</td>\r\n  </tr>\r\n</table>\r\nSet the price of a <b>Spot</b>. Does not modify existing bookings.\r\n\r\n##### GET `/api/spots/:id/name`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the name of the <b>Spot</b>\r\n\r\n##### PUT `/api/spots/:id/name`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>name</td>\r\n    <td>the name to set for the <b>Spot</b></td>\r\n  </tr>\r\n</table>\r\nSet a name for the <b>Spot</b> that will be used by the owner to identify spots (instead of just by location)\r\n\r\n##### GET `/api/spots/:id/reserved`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the reserved of the <b>Spot</b>\r\n\r\n##### PUT `/api/spots/:id/reserved`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>reserved</td>\r\n    <td>the reserved state to set for the <b>Spot</b></td>\r\n  </tr>\r\n</table>\r\nSet the reserved state of the <b>Spot</b>. When true, this <b>Spot</b> will not be booked when booking a generic <b>Spot</b> through a **Lot**.\r\n\r\n##### GET `/api/spots/:id/description`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the description of the <b>Spot</b>\r\n\r\n##### PUT `/api/spots/:id/description`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>description</td>\r\n    <td>the description to set for the <b>Spot</b></td>\r\n  </tr>\r\n</table>\r\nSet the description of the <b>Spot</b> that will be displayed to users looking to rent the spot (can provide details regarding where to park, type of spot, etc.)\r\n\r\n##### GET `/api/spots/:id/attendants`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n</table>\r\nReturn the attendants associated with the spot.\r\n\r\n##### PUT `/api/spots/:id/attendants`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>attendants</td>\r\n    <td>The id's of <b>User</b>'s to add as attendants</td>  \r\n  </tr>\r\n</table>\r\nReturn the attendants associated with the spot.\r\n\r\n##### GET `/api/spots/:id/bookings`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the bookings associated with the <b>Spot</b> with the given id.\r\n\r\n##### PUT `/api/spots/:id/bookings`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n  <tr>\r\n    <td>start</td>\r\n    <td>The start of the booking</td>\r\n  </tr>\r\n  <tr>\r\n    <td>end</td>\r\n    <td>The end of the booking</td>\r\n  </tr>\r\n  <tr>\r\n    <td>bookings</td>\r\n    <td>The <b>Booking</b> object(s) to add, can be either a single <b>Booking</b> object or an <code>Array</code> of them that must include properties <b>start</b> and <b>end</b> (when this is used, the rest of the request body is ignored)\r\n  </tr>\r\n</table>\r\nCreates a new booking for the <b>Spot</b>\r\n\r\n##### PUT `/api/spots/:id/bookings/remove`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n  <tr>\r\n    <td>id</td>\r\n    <td>The id of the booking</td>\r\n  </tr>\r\n  <tr>\r\n  <td><i>(used instead of id) start</td>\r\n    <td>The start of the booking</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>(used instead of id) end</td>\r\n    <td>The end of the booking</td>\r\n  </tr>\r\n  <tr>\r\n    <td>bookings</td> \r\n    <td>The <b>Booking</b> object(s) to remove, can be either a single <b>Booking</b> object or an <code>Array</code> of them that must include properties <b>start</b> and <b>end</b> or an <b>id</b> (when this is used, the rest of the request body is ignored)\r\n  </tr>\r\n</table>\r\nRemoves the specified booking objects from the <b>Spot</b> and updates schedules.\r\n\r\n##### GET `/api/spots/:id/available`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the ranges during which this <b>Spot</b> is available in an array where each pair of indices is a start and end time. \r\n\r\n##### PUT `/api/spots/:id/available`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>start</td>\r\n    <td>The start of the range to add</td>\r\n  </tr>\r\n  <tr>\r\n    <td>end</td>\r\n    <td>The end of the range to add</td>\r\n  </tr>\r\n  <tr>\r\n    <td>interval</td>\r\n    <td><i>(optional - required for recuring ranges)</i> The interval (in ms) at which to repeat this range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>count </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The number of times to repeat the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>finish </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The limit at which to stop repeating the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>schedules</td>\r\n    <td>An array of schedules each with <i>start</i>, <i>end</i>, and optionally <i>interval</i> and either <i>count</i> or <i>finish</i>. If using an array, the rest of the body of the request will be ignored.\r\n  </tr>\r\n</table>\r\nAdds availability based on the supplied information. Either <code>count</code> (of reptitions) or <code>finish</code> (final upper limit) must be set if using a recuring range.\r\n\r\n##### PUT `/api/spots/:id/available/remove`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>owner</td>\r\n  </tr>\r\n  <tr>\r\n    <td>start</td>\r\n    <td>The start of the range to remove</td>\r\n  </tr>\r\n  <tr>\r\n    <td>end</td>\r\n    <td>The end of the range to remove</td>\r\n  </tr>\r\n  <tr>\r\n    <td>interval</td>\r\n    <td><i>(optional - required for recuring ranges)</i> The interval (in ms) at which to repeat this range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>count </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The number of times to repeat the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>finish </td>\r\n    <td><i>(optional - required for recuring ranges)</i> The limit at which to stop repeating the recuring range</td>\r\n  </tr>\r\n  <tr>\r\n    <td>schedules</td>\r\n    <td>An array of schedules each with <i>start</i>, <i>end</i>, and optionally <i>interval</i> and either <i>count</i> or <i>finish</i>. If using an array, the rest of the body of the request will be ignored.\r\n  </tr>\r\n</table>\r\nRemoves availability based on the supplied information. Either <code>count</code> (of reptitions) or <code>finish</code> (final upper limit) must be set if using a recuring range.\r\n\r\n##### GET `/api/spots/:id/booked`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns the ranges during which this <b>Spot</b> is booked in an array where each pair of indices is a start and end time. \r\n\r\n##### GET `/api/spots/:id/schedules`\r\n<table>\r\n  <tr>\r\n    <td><i>security</i></td>\r\n    <td>attendant</td>\r\n  </tr>\r\n</table>\r\nReturns an object which contains 2 propertes: `booked` and `available` each of which are arrays where each pair of indices is a start and end time.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}